// Path: prisma/schema.prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- CENTRAL MODEL: THE CLUB ---
model Club {
  id               String    @id @default(cuid())
  name             String
  address          String?
  logoUrl          String?
  openingTime      String?   @default("09:00")
  closingTime      String?   @default("23:00")
  subscriptionTier String    @default("essential")
  stripeCustomerId String?   @unique
  
  // Relationships
  admins       User[]
  courts       Court[]
  bookings     Booking[]
  competitions Competition[]
  
  openMatches  OpenMatch[]
}

// --- USER AND AUTHENTICATION MODELS ---
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  phone         String?
  emailVerified DateTime?
  image         String?
  position      String?
  level         String?
  birthDate     DateTime?
  
  clubId        String?
  club          Club?     @relation(fields: [clubId], references: [id])
  
  accounts      Account[]
  sessions      Session[]
  
  teamsAsPlayer1 Team[]    @relation("Player1OfTeams")
  teamsAsPlayer2 Team[]    @relation("Player2OfTeams")
  bookings      Booking[]
  openMatches   OpenMatchPlayer[]
}

// --- NextAuth Models ---
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

// --- BOOKING AND COURTS MODULE ---
model Court {
  id       String    @id @default(cuid())
  name     String
  type     String    @default("Indoor")
  clubId   String
  club     Club      @relation(fields: [clubId], references: [id], onDelete: Cascade)
  bookings Booking[]
  openMatches OpenMatch[]
}

model Booking {
  id         String   @id @default(cuid())
  startTime  DateTime
  endTime    DateTime
  totalPrice Float
  courtId    String
  court      Court    @relation(fields: [courtId], references: [id])
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  guestName  String?
  clubId     String
  club       Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  
  status      String     @default("confirmed")
  openMatch   OpenMatch?
  
  @@unique([courtId, startTime])
}

// --- UNIFIED COMPETITION MODULE ---
enum CompetitionFormat {
  LEAGUE
  KNOCKOUT
  GROUP_AND_KNOCKOUT
}

// --- AÑADIR ESTE ENUM ---
enum CompetitionStatus {
  ACTIVE
  FINISHED
}

model Competition {
  id        String   @id @default(cuid())
  name      String
  clubId    String
  club      Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  format    CompetitionFormat @default(LEAGUE)
  rounds    Int      @default(1)
  status    CompetitionStatus @default(ACTIVE) // <-- AÑADIR ESTA LÍNEA
  groupSize Int?
  teamsPerGroupToAdvance Int?
  teams     Team[]
  matches   Match[]
}

model Team {
  id          String @id @default(cuid())
  name        String
  player1Id   String
  player1     User   @relation("Player1OfTeams", fields: [player1Id], references: [id], onDelete: Cascade)
  player2Id   String
  player2     User   @relation("Player2OfTeams", fields: [player2Id], references: [id], onDelete: Cascade)
  competitionId String
  competition Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  group       String?
  points      Int @default(0)
  played      Int @default(0)
  won         Int @default(0)
  lost        Int @default(0)
  setsFor     Int @default(0)
  setsAgainst Int @default(0)
  gamesFor    Int @default(0)
  gamesAgainst Int @default(0)
  matchesAsTeam1 Match[] @relation("MatchesAsTeam1")
  matchesAsTeam2 Match[] @relation("MatchesAsTeam2")
  @@unique([competitionId, player1Id, player2Id])
}

model Match {
  id        String    @id @default(cuid())
  result    String?
  matchDate DateTime?
  roundNumber Int
  roundName   String?
  winnerId    String?
  team1Id   String?
  team1     Team?      @relation("MatchesAsTeam1", fields: [team1Id], references: [id], onDelete: NoAction)
  team2Id   String?
  team2     Team?      @relation("MatchesAsTeam2", fields: [team2Id], references: [id], onDelete: NoAction)
  competitionId String
  competition   Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
}

// --- MÓDULO DE PARTIDAS ABIERTAS (PLAY!) ---

enum OpenMatchStatus {
  OPEN
  FULL
  CONFIRMED
  CANCELLED
}

model OpenMatch {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  matchTime DateTime
  status    OpenMatchStatus @default(OPEN)
  levelMin  Float?
  levelMax  Float?
  
  clubId    String
  club      Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  
  courtId   String
  court     Court    @relation(fields: [courtId], references: [id])
  
  players   OpenMatchPlayer[]
  
  booking   Booking? @relation(fields: [bookingId], references: [id])
  bookingId String?  @unique
}

model OpenMatchPlayer {
  openMatchId String
  openMatch   OpenMatch @relation(fields: [openMatchId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime  @default(now())

  @@id([openMatchId, userId])
}