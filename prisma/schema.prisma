// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- CENTRAL MODEL: THE CLUB ---
model Club {
  id               String    @id @default(cuid())
  name             String
  address          String?
  logoUrl          String?
  openingTime      String?   @default("09:00")
  closingTime      String?   @default("23:00")
  subscriptionTier String    @default("essential")
  stripeCustomerId String?   @unique
  
  // Relationships
  admins       User[]
  courts       Court[]
  bookings     Booking[]
  // --- MODIFICADO: La relación ahora es con "Competition" ---
  competitions Competition[]
}

// --- USER AND AUTHENTICATION MODELS ---
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  phone         String?
  emailVerified DateTime?
  image         String?
  position      String?
  level         String?
  birthDate     DateTime?
  
  clubId        String?
  club          Club?     @relation(fields: [clubId], references: [id])
  
  accounts      Account[]
  sessions      Session[]
  
  teamsAsPlayer1 Team[]    @relation("Player1OfTeams")
  teamsAsPlayer2 Team[]    @relation("Player2OfTeams")
  bookings      Booking[]
}

// --- NextAuth Models (Sin Cambios) ---
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

// --- BOOKING AND COURTS MODULE (Sin Cambios) ---
model Court {
  id       String    @id @default(cuid())
  name     String
  type     String    @default("Indoor")
  clubId   String
  club     Club      @relation(fields: [clubId], references: [id], onDelete: Cascade)
  bookings Booking[]
}

model Booking {
  id         String   @id @default(cuid())
  startTime  DateTime
  endTime    DateTime
  totalPrice Float
  status     String   @default("confirmed")
  courtId    String
  court      Court    @relation(fields: [courtId], references: [id])
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  guestName  String?
  clubId     String
  club       Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  @@unique([courtId, startTime])
}


// --- UNIFIED COMPETITION MODULE ---

// --- AÑADIDO: Enum para definir el formato de la competición ---
enum CompetitionFormat {
  LEAGUE             // Todos contra todos (Round Robin)
  KNOCKOUT           // Eliminación directa
  GROUP_AND_KNOCKOUT // Fase de grupos y luego eliminatoria
}

// --- MODIFICADO: El modelo "League" ahora es "Competition" ---
model Competition {
  id        String   @id @default(cuid())
  name      String
  clubId    String
  club      Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)

  // Campos para gestionar diferentes formatos
  format    CompetitionFormat @default(LEAGUE)
  groupSize Int?              // Equipos por grupo (para GROUP_AND_KNOCKOUT)
  teamsPerGroupToAdvance Int? // Cuántos equipos avanzan por grupo

  teams     Team[]
  matches   Match[]
}

// --- MODIFICADO: El modelo "Team" ahora se relaciona con "Competition" ---
model Team {
  id          String @id @default(cuid())
  name        String
  player1Id   String
  player1     User   @relation("Player1OfTeams", fields: [player1Id], references: [id], onDelete: Cascade)
  player2Id   String
  player2     User   @relation("Player2OfTeams", fields: [player2Id], references: [id], onDelete: Cascade)
  
  // La relación ahora es con "Competition"
  competitionId String
  competition Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  
  // Campo para la fase de grupos
  group       String? // ej: "A", "B", "C"

  // Estadísticas (se mantienen por ahora, útiles para ligas y fases de grupo)
  points      Int @default(0)
  played      Int @default(0)
  won         Int @default(0)
  lost        Int @default(0)
  setsFor     Int @default(0)
  setsAgainst Int @default(0)
  gamesFor    Int @default(0)
  gamesAgainst Int @default(0)

  matchesAsTeam1 Match[] @relation("MatchesAsTeam1")
  matchesAsTeam2 Match[] @relation("MatchesAsTeam2")

  @@unique([competitionId, player1Id, player2Id])
}

// El modelo "Match" ahora se relaciona con "Competition" ---
model Match {
  id        String    @id @default(cuid())
  result    String?
  matchDate DateTime?
  
  // Campos de ronda más genéricos
  roundNumber Int       // Número de la ronda (1, 2, 3...)
  roundName   String?   // Nombre descriptivo (ej: "Jornada 1", "Cuartos de Final")
  winnerId    String?
  
  team1Id   String?
  team1     Team?      @relation("MatchesAsTeam1", fields: [team1Id], references: [id], onDelete: NoAction)
  team2Id   String?
  team2     Team?      @relation("MatchesAsTeam2", fields: [team2Id], references: [id], onDelete: NoAction)

  // La relación ahora es con "Competition"
  competitionId String
  competition   Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
}